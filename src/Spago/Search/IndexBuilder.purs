module Spago.Seach.IndexBuilder where

import Prelude

import Spago.Search.Declarations (Declarations)
import Spago.Search.Index (mkSearchIndex)

import Data.Argonaut.Core (stringify)
import Data.Argonaut.Decode (decodeJson)
import Data.Argonaut.Encode (encodeJson)
import Data.Argonaut.Parser (jsonParser)
import Data.Array as Array
import Data.Either (hush)
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Search.Trie as Trie
import Data.String.CodePoints as String
import Data.String.Common as String
import Data.String.Pattern (Pattern(..), Replacement(..))
import Data.String.Pattern as String
import Data.Traversable (for, for_)
import Effect (Effect)
import Effect.Aff (Aff, launchAff_)
import Effect.Class (liftEffect)
import Effect.Console (log)
import Node.Encoding (Encoding(UTF8))
import Node.FS.Aff (exists, readTextFile, readdir, writeTextFile)
import Node.Process as Process

collectDeclarations :: Array String -> Aff (Array Declarations)
collectDeclarations paths =
  Array.catMaybes <$> for paths \path -> do
    let jsonFile = "output/" <> path <> "/docs.json"
    doesExist <- exists jsonFile
    if doesExist then do
      contents <- readTextFile UTF8 jsonFile
      pure $ hush $ jsonParser contents >>= decodeJson
    else
      pure Nothing

writeDeclarations :: Array Declarations -> Aff Unit
writeDeclarations decls = do
  let filename = "generated-docs/spago-search-index.js"
      dirname  = "generated-docs/"

  whenM (not <$> exists dirname) $
    liftEffect $ do
      log "Run `spago docs` first!"
      Process.exit 1

  let header =
        "// This file was generated by spago.\n" <>
        "window.spagoSearchIndex = "

  writeTextFile UTF8 filename (header <> (stringify $ encodeJson decls))

patchDocs :: Aff Unit
patchDocs = do
  let dirname = "generated-docs/"
  let patch = "<!-- Spago search index. -->" <>
              "<script type=\"text/javascript\" src=\"../spago-search-app.js\"></script>" <>
              "</body>"

  whenM (not <$> exists dirname) $
    liftEffect $ do
      log "Run `spago docs` first!"
      Process.exit 1

  paths <- readdir (dirname <> "html")
  for_ paths \file -> do
    let path = dirname <> "html/" <> file
    contents <- readTextFile UTF8 path
    when (not $ String.contains (String.Pattern patch) contents) do
      let patched = String.replace (Pattern "</body>") (Replacement patch) contents
      writeTextFile UTF8 path patched

main :: Effect Unit
main = do
  launchAff_ do
    paths <- readdir "output"
    declarations <- collectDeclarations paths
    liftEffect $ log $ "Found " <> show (Array.length declarations) <> " modules"
    writeDeclarations declarations
    patchDocs
    let index = mkSearchIndex declarations
    liftEffect $ log $ "Loaded " <> show (Trie.size $ unwrap index) <> " definitions"
